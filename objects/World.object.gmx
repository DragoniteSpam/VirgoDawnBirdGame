<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sys_virgo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm: Resize Window

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Alarm: Weather
weather=get_current_weather();
alarm[1]=weather_get_duration();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (--timer_wait==-1){
    with (cutscene){
        scr_continue(cutscene_index);
    }
}

time_step=get_timer()-ts_start;
t_time_step=t_time_step+time_step;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frames++;

delta_time_seconds=delta_time/MILLION;

day_brightness=lerp(day_brightness, day_time_brightness[day_era], 0.005);
ts_start=get_timer();
ds_list_clear(list_lights);

if (status_id==READY){
    
    CURRENT_UNIX_TIME=timeCurrentUnix();

    background_color=get_sky_color();
    background_showcolor=true;
    
    if (game_current_hour&lt;6||game_current_hour&gt;20){
        day_era=Daytimes.night;
    } else if (game_current_hour&lt;12){
        day_era=Daytimes.morning;
    } else if (game_current_hour&lt;16){
        day_era=Daytimes.afternoon;
    } else {
        day_era=Daytimes.evening;
    }
    
    // loops from 0 to 1
    day_cycle_point=(game_current_hour+game_current_minute/60+(game_current_second)/3600)/24;
    
    // If you don't remove the object the camera is attached to, the raycast can
    // hit itself and you could end up with a prompt to 'talk' to yourself, which
    // you probably don't want.
    if (game_mode_draw_world[mode]){
        if (instance_exists(Player)){
            c_object_set_mask(Player.object, 0, 0);
        }
        if (mode==GameModes.play){
            var _dst=192;
            if (CollisionObjectRaycastMouse(Camera, COLLISION_PRIMARY, 64+ternary(Camera.pov==CameraPOV.cam_third, _dst, 0))){
                ray_object=CollisionGetObject();
            } else {
                ray_object=noone;
            }
        } else if (mode==GameModes.title){
            ray_object=noone;
        } else {
            if (CollisionObjectRaycastMouse(Camera, COLLISION_EVERYTHING, 65536)){
                ray_object=CollisionGetObject();
            } else {
                ray_object=noone;
            }
        }
        if (instance_exists(Player)){
            c_object_set_mask(Player.object, Player.mask, Player.mask);
            CollisionObjectTransform(Player);
        }
    } else {
        ray_object=noone;
    }
    with (Player){
        if (timer_revelation&gt;-1){
            var f=48;
            var a=16;
            if (!audio_is_playing(se_tick)){
                audio_emitter_pitch(World.emitter_tick, 1+f/(a+timer_revelation));
                audio_emitter_position(World.emitter_tick, x, y, z);
                audio_play_sound_on(World.emitter_tick, se_tick, false, 1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>INIT_PREPARE();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// this should be updated here instead of in the End Step because some things in
// Draw GUI might use them
if (status_id==READY){
    mouse_x_last=MOUSE_X;
    mouse_y_last=MOUSE_Y;
    if (last_second!=current_second){
        with (Player){
            if (grounded){
                if (flight_flaps&lt;8){
                    var pch=1+0.1*(flight_flaps+1)/4;
                    audio_emitter_position(World.emitter_flight_meter, x, y, z);
                    audio_emitter_pitch(World.emitter_flight_meter, pch);
                    audio_play_sound_on(World.emitter_flight_meter, se_coin01, false, 1);
                }
                flight_flaps=min(starting_flight_flaps, ++flight_flaps);
            }
        }
        with (Entity){
            mp_current=min(mp_current+1, get_max_mp(exp_mp));
            hp_current=hp_current+sign(hp_growth);
            hp_growth=max(0, --hp_growth);
        }
        last_second=current_second;
        Player.time_play++;
        // Update in-game clock
        // This is in Draw GUI End mainly because it's the VERY LAST THING to execute than because
        // it's relevant to drawing GUI stuff.
//        game_clock_update_second(time_scale);
        // check to see if another music should come on
        if (currently_playing){
            if (!audio_is_playing(current_sound)){
                PLAY_AUTO();
            }
        }
        // Play ambient sounds
        // @todo Find a better way to do this
        ambient_package=BASE_ASSET;
        var ag=ds_map_find_value(all_mod_packages, ambient_package).my_audio_groups[0];
        if (irandom(1000)==25&amp;&amp;ds_list_size(ag.ambient)&gt;0&amp;&amp;!audio_is_playing(ag.ambient_playing)){
            ag.ambient_playing=PLAY(ag.ambient[| irandom(ds_list_size(ag.ambient)-1)], false);
        }
    }
    if (mouse_over_menu){
        with (Camera){
            x=xprevious;
            y=yprevious;
            z=zprevious;
            xto=xtoprevious;
            yto=ytoprevious;
            zto=ztoprevious;
        }
    } else {
        game_clock_update_second(time_scale*World.delta_time_seconds);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (status_id==READY){
    if (render_distance_lights&gt;0){
        ds_list_clear(list_point_lights);
        // I really, really, really wish interfaces existed in Game Maker.
        with (EntityLamp){
            if (lit&amp;&amp;point_distance(x, y, Camera.x, Camera.y)&lt;lm.fog_end*render_distance_lights&amp;&amp;ds_list_size(World.list_point_lights)&lt;5){
                ds_list_add(World.list_point_lights, id);
            }
        }
        with (EntityFire){
            if (lit&amp;&amp;point_distance(x, y, Camera.x, Camera.y)&lt;lm.fog_end*render_distance_lights&amp;&amp;ds_list_size(World.list_point_lights)&lt;5){
                ds_list_add(World.list_point_lights, id);
            }
        }
        with (EffectBallLightning){
            if (point_distance(x, y, Camera.x, Camera.y)&lt;lm.fog_end*render_distance_lights&amp;&amp;ds_list_size(World.list_point_lights)&lt;5){
                ds_list_add(World.list_point_lights, id);
            }
        }
        with (EffectBallFire){
            if (point_distance(x, y, Camera.x, Camera.y)&lt;lm.fog_end*render_distance_lights&amp;&amp;ds_list_size(World.list_point_lights)&lt;5){
                ds_list_add(World.list_point_lights, id);
            }
        }
    }
    set_lighting(true);
    d3d_set_culling(true);
    d3d_set_hidden(true);
    set_fog(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the application surface (must be first)

if (status_id!=READY){
    shader_set(shd_default);
    draw_surface(application_surface, 0, 0);
    shader_reset();
} else {
    script_execute(World.active_shader.code, World.active_shader);
    draw_application_surface();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw HUD stuff

if (status_id!=READY){
    draw_set_color(c_white);
    shader_set(shd_white);
    shader_set_uniform_f(shader_get_uniform(shd_white, "alpha"), min((frames-30)/60, 1));
    draw_self();
    draw_text(x+64, y, get_text(Text.utilLoading));
    
    draw_set_halign(fa_center);
    draw_text_ext(x, y+128, rq, -1, 640);
    draw_set_halign(fa_left);
    
    if (frames==90){
        var elapsed=0;
        var t=get_timer();
        INIT_LOAD();
        status_id=READY;
        elapsed=get_timer()-t;
        print(get_text(Text.utilLoadingTook)+' '+string(elapsed/MILLION)+' '+get_text(Text.utilLoadingSeconds));
        Camera.pov=CameraPOV.cam_first;
    }
} else {
    mouse_over_menu=false;
    var tdg_start=get_timer();
    shader_reset();
    d3d_set_culling(false);
/*    d3d_set_hidden(false);*/
    set_fog(false);
    set_lighting(false);
/*    if (debug){
        display_set_gui_size(W+320, H);
    } else {
        display_set_gui_size(W, H);
    }*/
    
//    d3d_set_projection_ortho(0, 0, WW, HH, 0);
    draw_set_alpha_test(false);
    switch (mode){
        case GameModes.title:
            draw_sprite_ext(sys_virgo, 0, 64, 64, 1, 1, -(frames%360), c_white, 1);
            draw_set_font(Font16);
            draw_set_valign(fa_middle);
            draw_set_halign(fa_left);
            draw_text_outline_dn(128, 52, get_text(Text.titleSplashEngine), c_white, c_black, 2, 1);
            draw_text_outline_dn(128, 76, get_text(Text.titleSplashCopy), c_white, c_black, 2, 1);
//            draw_background_ext(b_logo_main, (W-background_get_width(b_logo_main))/2, 128, 1, 1, 0, c_white, (frames-time_load_finish)/60);
            draw_set_alpha(clamp((frames-time_load_finish-60)/60, 0, 1));
//            draw_text_outline_dn(W/2, H/2, GAME_SUBTITLE, c_white, c_black, 1, 1);
            // this is used in a few places so it needs to be saved to a variable
            var alpha=clamp((frames-time_load_finish-80)/60, 0, 1);
            draw_set_alpha(alpha);
            draw_set_halign(fa_left);
            draw_set_font(Font20);
            switch (title_stage){
                case Misc.title_delete:
                    draw_text_outline_dn(128, H/2+128, get_text(Text.titleSaveDelete), c_white, c_black, 1, alpha);
                    draw_text_outline_dn(128, H/2+160, get_text(Text.yeah), c_white, c_black, 1, alpha);
                    draw_text_outline_dn(128, H/2+192, get_text(Text.nah), c_white, c_black, 1, alpha);
                    title_index=pause_cursor_handle(128, H/2+160, W/4, H/2+192, title_index, 1, 96, H/2+150, 32);
                    draw_rectangle_dn(124, H/2+150+32*title_index, W/4, H/2+170+32*title_index, c_black, c_white, true);
                    draw_background(b_cursor, MOUSE_X, MOUSE_Y);
                    if (get_release_a()){
                        switch (title_index){
                            case 0:
                                break;
                            case 1:
                                title_stage=Misc.title_main;
                                title_index=2;
                                break;
                        }
                    }
                    if (get_release_b()){
                        title_stage=Misc.title_main;
                    }
                    break;
                case Misc.title_main:
                    draw_text_outline_dn(128, H/2+128, get_text(Text.titleNew), c_white, c_black, 1, alpha);
                    draw_text_outline_dn(128, H/2+160, get_text(Text.titleLoad), c_white, c_black, 1, alpha);
                    draw_text_outline_dn(128, H/2+192, get_text(Text.titleDelete), c_white, c_black, 1, alpha);
                    draw_text_outline_dn(128, H/2+224, get_text(Text.titleQuit), c_white, c_black, 1, alpha);
                    title_index=pause_cursor_handle(128, H/2+128, W/4, H/2+224, title_index, 3, 96, H/2+118, 32);
                    draw_rectangle_dn(124, H/2+114+32*title_index, W/4, H/2+142+32*title_index, c_black, c_white, true);
                    draw_background(b_cursor, MOUSE_X, MOUSE_Y);
                    if (get_release_a()){
                        switch (title_index){
                            case 0: // New Game
                                centerCursor();
                                mode=GameModes.play;
                                Camera.pov=CameraPOV.cam_first;
                                Player.locked=false;
                                Player.movement_script=movement_player;
                                // @todo Finish this
//                                Player.cutscene_index=Cutscenes.mq01_00Opening;
                                Player.last_land_z=Player.z;    // because this needs to be reset &gt;_&gt;
                                with (Player){
                                    //scr_cutscene_launch(cutscene_index);
                                }
                                if (debug){
                                    DEBUG_EQUIPS();
                                    Player.hp_current=get_max_hp(Player.exp_hp);
                                }
                                break;
                            case 1: // Load Game
                                title_stage=Misc.title_load;
                                title_index=0;
                                window_mouse_set_ext(96, H/2+120);
                                break;
                            case 2: // Delete Game
                                title_stage=Misc.title_delete;
                                title_index=0;
                                window_mouse_set_ext(96, H/2+182);
                                break;
                            case 3: // Quit Game
                                game_end();
                                break;
                        }
                    }
                    break;
                case Misc.title_load:
                    var save_1_exists=file_exists(SAVE_FILE_DIRECTORY+"\0"+SAVE_FILE_EXTENSION);
                    var save_2_exists=file_exists(SAVE_FILE_DIRECTORY+"\1"+SAVE_FILE_EXTENSION);
                    var save_3_exists=file_exists(SAVE_FILE_DIRECTORY+"\2"+SAVE_FILE_EXTENSION);
                    if (save_1_exists){
                        draw_text_outline_dn(128, H/2+128, get_text(Text.titleLoad1), c_white, c_black, 1, alpha);
                    } else {
                        draw_text_outline_dn(128, H/2+128, get_text(Text.titleNoSave), c_white, c_black, 1, alpha);
                    }
                    if (save_2_exists){
                        draw_text_outline_dn(128, H/2+160, get_text(Text.titleLoad2), c_white, c_black, 1, alpha);
                    } else {
                        draw_text_outline_dn(128, H/2+160, get_text(Text.titleNoSave), c_white, c_black, 1, alpha);
                    }
                    if (save_3_exists){
                        draw_text_outline_dn(128, H/2+192, get_text(Text.titleLoad3), c_white, c_black, 1, alpha);
                    } else {
                        draw_text_outline_dn(128, H/2+192, get_text(Text.titleNoSave), c_white, c_black, 1, alpha);
                    }
                    draw_text_outline_dn(128, H/2+224, get_text(Text.invBack), c_white, c_black, 1, alpha);
                    title_index=pause_cursor_handle(128, H/2+128, W/4, H/2+224, title_index, 3, 96, H/2+118, 32);
                    draw_rectangle_dn(124, H/2+114+32*title_index, W/4, H/2+142+32*title_index, c_black, c_white, true);
                    draw_background(b_cursor, MOUSE_X, MOUSE_Y);
                    if (get_release_a()){
                        switch (title_index){
                            case 0:
                                if (save_1_exists){
                                    World.vars[0]=0;
                                    Player.cutscene_index=get_cutscene_from_name("Load", 0);
                                    with (Player){
                                        scr_cutscene_launch(Player.cutscene_index);
                                    }
                                } else {
                                }
                                break;
                            case 1:
                                if (save_2_exists){
                                    World.vars[0]=1;
                                    Player.cutscene_index=get_cutscene_from_name("Load", 0);
                                    with (Player){
                                        scr_cutscene_launch(Player.cutscene_index);
                                    }
                                } else {
                                }
                                break;
                            case 2:
                                if (save_3_exists){
                                    World.vars[0]=2;
                                    Player.cutscene_index=get_cutscene_from_name("Load", 0);
                                    with (Player){
                                        scr_cutscene_launch(Player.cutscene_index);
                                    }
                                } else {
                                }
                                break;
                            case 3:
                                title_stage=Misc.title_main;
                                title_index=3;
                                break;
                        }
                    }
                    break;
                default:
                    title_stage=Misc.title_main;
                    break;
            }
            draw_set_alpha(1);
            break;
        default:
            if (Controller.game_has_focus){
                // Letterboxy bars, for when soaring and whatnot
                draw_rectangle_colour(0, 0, W, H/2-horizontal_bar_separation, c_black, c_black, c_black, c_black, false);
                draw_rectangle_colour(0, H, W, H/2+horizontal_bar_separation, c_black, c_black, c_black, c_black, false);
                // Location signs
                if (Player.location!=noone){
                    with (CurrentLocationSign){
                        if (moment&lt;10){
                            draw_location_graphic(0, 8*moment-80, Player.location);
                        } else if (moment&lt;590){
                            draw_location_graphic(0, 0, Player.location);
                        } else if (moment&lt;600){
                            draw_location_graphic(0, 8*(600-moment)-80, Player.location);
                        } else {
                            instance_destroy();
                        }
                        moment++;
                    }
                }
                
                display_cursor=true;
                // ray_object and stuff is done in Begin Step
                
                draw_set_color(c_white);
                draw_set_font(Font12);
                switch (mode){
                    case GameModes.play:
                        if (!pause_show){
                            draw_compass(W/2, 32);
                            script_execute(get_class(Player.id).hud_script);
                            script_execute(get_class(Player.id).secondary_hud_script);
                            draw_equips();
                        } else if (!pause_is_hidden){
                            game_hud_pause();
                        }
                        with (ShowableItem){
                            script_execute(render);
                        }
                        break;
                    case GameModes.edit_object:
                        draw_set_font(Font12);
                        editor_hud_mode_change();
                        editor_hud_object();
                        break;
                    case GameModes.edit_event:
                        draw_set_font(Font12);
                        editor_hud_mode_change();
                        editor_hud_event();
                        break;
                    case GameModes.edit_settings:
                        draw_set_font(Font12);
                        editor_hud_map();
                        // mode change has to come after map settings because map settings
                        // draws a full rectangle texture over the entire game window
                        editor_hud_mode_change();
                        break;
                    case GameModes.edit_file:
                        draw_set_font(Font12);
                        editor_hud_mode_change();
                        editor_hud_file();
                        break;
                    case GameModes.edit_text:
                        draw_set_font(Font12);
                        editor_hud_text();
                        editor_hud_mode_change();
                        break;
                    case GameModes.edit_game:
                        draw_set_font(Font12);
                        editor_hud_game();
                        editor_hud_mode_change();
                        break;
                    case GameModes.edit_inventory:
                        draw_set_font(Font12);
                        editor_hud_inventory();
                        editor_hud_mode_change();
                        break;
                    case GameModes.edit_quest:
                        draw_set_font(Font12);
                        editor_hud_quest();
                        editor_hud_mode_change();
                        break;
                    case GameModes.edit_all:
                        draw_set_font(Font12);
                        editor_hud_all();
                        editor_hud_mode_change(false);
                        break;
                    case GameModes.edit_generation:
                        draw_set_font(Font12);
                        editor_hud_generation();
                        editor_hud_mode_change();
                        break;
                    case GameModes.edit_cutscene:
                        draw_set_font(Font12);
                        editor_hud_cutscene();
                        editor_hud_mode_change();
                        break;
                    case GameModes.edit_database:
                        draw_set_font(Font12);
                        editor_hud_database();
                        editor_hud_mode_change();
                        break;
                }
                
                draw_set_color(graphics_text_color);
                draw_set_valign(fa_middle);
                draw_set_halign(fa_right);
                draw_set_font(Font16);
                
                // Emotes, small speech bubbles, etc
                
                with (HUDOverlay){
                    script_execute(render);
                }
                // Speech bubbles - Actor
                if (speaking!=noone){
                    if (speaking_arrow){
                        var speaking_actor=ds_map_find_value(all_mod_packages, speaking.npc_package).my_npcs[speaking.npc_index].actor
                        var array=WorldTo2D(speaking_actor.x, speaking_actor.y, speaking_actor.z+16, Camera.x, Camera.y, Camera.z);
                        var xx=W/3;
                        var yy=H*3/4;
                        if (array[vec3.xx]&lt;W/2){
                            xx*=2;
                        }
                        var dx=(array[vec3.xx]-xx)*0.4;
                        var dy=(array[vec3.yy]-yy)*0.4;
                        array[vec3.xx]=xx+dx;
                        array[vec3.yy]=yy+dy;
                        draw_triangle_colour(xx-32, yy, array[vec3.xx], array[vec3.yy], xx+32, yy, c_white, c_white, c_white, false);
                        draw_triangle_colour(xx-32, yy, array[vec3.xx], array[vec3.yy], xx+32, yy, c_black, c_black, c_black, true);
                    }
                    with (speaking){
                        draw_rectangle_texture_auto(0, H*3/4, W, H, true);
                        draw_set_halign(fa_left);
                        draw_set_valign(fa_top);
                        draw_set_color(graphics_text_color);
                        draw_set_font(Font20);
                        draw_text_ext(32, H*3/4+22, string_copy(show_text_message, 1, show_text_t), -1, W-64);
                        show_text_t=min(show_text_t+get_text_speed(), string_length(show_text_message));
                        var mlen=string_length(show_text_message);
                        // multiple choice options?
                        if (show_player_money&amp;&amp;show_text_t==mlen){
                            draw_set_valign(fa_middle);
                            draw_rectangle_texture_auto(32, H*3/4-96, W/4+32, H*3/4-32, true);
                            draw_text(64, H*3/4-64, get_text(Text.utilShowMoney)+string(GetPlayerMoney()));
                        }
                        if (show_text_option&amp;&amp;show_text_t==mlen){
                            draw_set_font(Font20);
                            draw_set_valign(fa_middle);
                            var s=ds_list_size(show_text_option_list);
                            var left=W-160-string_width_greatest(show_text_option_list)-string_width_greatest(show_text_option_list_secondary);
                            var top=H*3/4-64-s*24;
                            draw_rectangle_texture_auto(left, top, W-32, H*3/4-32, true);
                            for (var i=0; i&lt;s; i++){
                                draw_text(left+64, top+32+24*i, show_text_option_list[| i]);
                                if (ds_list_size(show_text_option_list_secondary)&gt;i){
                                    draw_set_halign(fa_right);
                                    draw_text(W-64, top+32+24*i, show_text_option_list_secondary[| i]);
                                    draw_set_halign(fa_left);
                                }
                            }
                            if (show_text_t&gt;=mlen&amp;&amp;(!show_item_quantity_overlay)){
                                show_text_option_index=pause_cursor_handle(left, top, W-32, H*3/4, show_text_option_index, s-1, left+32, top+32, 24);
                            }
                            draw_rectangle_colour(left+56, top+20+24*show_text_option_index, W-40, top+44+24*show_text_option_index, c_black, c_black, c_black, c_black, true);
                        }
                        if (show_text_string){
                            draw_set_valign(fa_middle);
                            draw_text(28, H-48, show_text_string_contents);
                            draw_line(28, H-32, W-32, H-28);
                            if (get_timer()%MILLION&gt;MILLION/2){
                                var cx=32+string_width(show_text_string_contents);
                                draw_line_width(cx, H-60, cx, H-36, 2);
                            }
                            show_text_string_contents=keyboard_string;
                            if (string_length(show_text_string_contents)&gt;show_text_string_limit){
                                show_text_string_contents=string_copy(show_text_string_contents, 1, show_text_string_limit);
                                keyboard_string=show_text_string_contents;
                            }
                            // warning - if you have A, Start or Select bound to a letter key, entering the letter key
                            // will cause the command input to be sent anyway.
                            if (Controller.press_a||Controller.press_start){
                                if (show_text_string_contents==''){
                                    show_text_string_contents=show_text_string_default;
                                }
                            }
                            if (Controller.press_select){
                                show_text_string_contents=string_backspace(show_text_string_contents);
                            }
                        }
                        if (show_item_quantity_overlay){
                            script_execute(item_overlay_script);
                        }
                        // continue
                        if (get_release_a()||Controller.release_b){
                            if (show_text_t&gt;=mlen){
                                World.speaking=noone;
                                scr_continue(World.cutscene_index);
                            } else {
                                show_text_t=string_length(show_text_message);
                            }
                        }
                    }
                }
                
                // Crosshairs
                if ((ray_object!=noone)&amp;&amp;!cursor_is_free){
                    draw_set_font(Font20);
                    draw_set_halign(fa_center);
                    draw_set_valign(fa_middle);
                    with (ray_object){
                        var str=script_execute(display_name_script);
                        if (str!=''){
                            var w=string_width(str);
                            var h=string_height(str);
                            draw_rectangle_texture_auto(W/2-w/2-8, H/2-h/2+56, W/2+w/2+8, H/2+h/2+72, true);
                            draw_text(W/2, H/2+64, str);
                        }
                    }
                }
                
                if (display_cursor){
                    if (cursor_is_free||mode!=GameModes.play){
                        draw_cursor_auto();
                    } else if (Player.free){
                        draw_cursor(W/2, H/2);
                    }
                }
            } else {
                draw_set_alpha(0.5);
                draw_rectangle_colour(0, 0, W, H, c_black, c_black, c_black, c_black, false);
                draw_set_alpha(1.0);
                draw_set_halign(fa_center);
                draw_set_valign(fa_middle);
                draw_set_font(Font32);
                draw_text_colour(W/2, H/2, get_text(Text.utilGameHasLostFocus)+'#'+get_text(Text.utilGameHasLostFocusSub), c_white, c_white, c_white, c_white, 1.0);
                draw_set_halign(fa_left);
            }
            break;
    }
    
    // Fade
    if (fade_alpha&gt;0){
        // My defailt shader doesn't seem to like alpha values for some reason.
        draw_set_alpha(fade_alpha);
        draw_rectangle_colour(0, 0, W, H, fade_color, fade_color, fade_color, fade_color, false);
        draw_set_alpha(1);
    }
    if (rq_show){
        draw_set_halign(fa_center);
        draw_text_ext_colour(W/2, H/2, rq, -1, W*3/4, rq_color, rq_color, rq_color, rq_color, 1);
    }
    
    fade_alpha=fade_alpha+fade_rate;
    
    // floating point epsilon, just in case
    if (abs(fade_alpha-fade_target)&lt;0.01){
        fade_rate=0;
        fade_alpha=fade_target;
    }
    
    time_draw_gui=get_timer()-tdg_start;
    t_time_draw_gui=t_time_draw_gui+time_draw_gui;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the debug stuff

if (status_id==READY){
    draw_set_color(graphics_text_color);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    
    draw_background(b_debug, W, 0);
    
    draw_set_font(Font12);
    draw_text(W+32, 16, 'Debug Stats');
    draw_text(W+32, 32, 'Compiled: '+tf[code_is_compiled()]);
    
    switch (debug_panel){
        case Misc.debug_main:
            draw_text(W+32, 48, movement_state_name[Player.movement_state]+' / '+string(floor(Camera.x))+', '+string(floor(Camera.y))+', '+string(Camera.z));
            f_real_fps=f_real_fps+fps_real;
            draw_text(W+32, 80, string(fps)+' fps; '+string(floor(fps_real))+' real; '+string(floor(f_real_fps/frames))+' avg');
            draw_text(W+32, 96, string(triangles)+' visible triangles');
            draw_text(W+32, 112, string(draw_calls)+' draw calls in 3D');
            draw_text(W+32, 128, string(triangles_fx)+' effect triangles');
            draw_text(W+32, 144, string(draw_fx)+' effect draw calls');
            draw_text(W+32, 160, string(c_world_get_count())+' collision objects');
            if (game_current_hour&gt;=12){
                var ap='PM';
            } else {
                var ap='AM';
            }
            draw_text(W+32, 176, 'Performance');
            draw_text(W+32, 192, string(game_current_hour%12)+':'+string_format_zero(game_current_minute)+':'+string_format_zero(floor(game_current_second))+' '+ap+' ('+day_time_name[day_era]+')');
            draw_text(W+32, 208, month_names[game_current_month]+' '+string(game_current_day)+', '+string(game_current_year));
            var s=(get_timer()/MILLION) div 1;
            var m=s div 60;
            var h=m div 60;
            if (h&gt;0){
                var u=string(h)+':'+string_format_zero(m%60, 2)+':'+string_format_zero(s%60, 2);
            } else if (m&gt;0){
                var u=string(m)+':'+string_format_zero(s%60, 2);
            } else {
                var u=string(s%60)+' seconds';
            }
            draw_text(W+32, 224, 'Uptime: '+u);
            draw_text(W+32, 240, 'Real Time');
            break;
        case Misc.debug_weather:
            draw_text(W+32, 48, 'Weather: '+weather.name);
            draw_text(W+32, 64, 'Fog: '+string(lm.fog_start)+' to '+string(lm.fog_end));
            draw_text(W+32, 80, 'Sun scale: '+string(lm.sun_scale));
            draw_text(W+32, 96, 'Intensity: '+string(lm.intensity));
            draw_text(W+32, 112, 'Wind direction: '+string(weather.direction));
            draw_text(W+32, 128, 'Show stars: '+tf[weather.show_stars]);
            break;
        case Misc.debug_input:
            var ww=192;
            draw_text(W+32, 48, 'Gamepad: '+tf[gamepad_is_connected(0)]);
            draw_text(W+32, 64, 'A: '+string(Controller.a));
            draw_text(W+32, 80, 'B: '+string(Controller.b));
            draw_text(W+32, 96, 'X: '+string(Controller.x));
            draw_text(W+32, 112, 'Y: '+string(Controller.y));
            draw_text(W+32, 128, 'Start: '+string(Controller.start));
            draw_text(W+32, 144, 'Select: '+string(Controller.select));
            draw_text(W+32, 160, 'L: '+string(Controller.l));
            draw_text(W+32, 176, 'R: '+string(Controller.r));
            draw_text(W+32, 192, 'L2: '+string(Controller.l2));
            draw_text(W+32, 208, 'R2: '+string(Controller.r2));
            draw_text(W+ww, 48, 'LS: '+string(Controller.ls));
            draw_text(W+ww, 64, 'RS: '+string(Controller.rs));
            draw_text(W+ww, 80, 'PUp: '+string(Controller.pup));
            draw_text(W+ww, 96, 'PDown: '+string(Controller.pdown));
            draw_text(W+ww, 112, 'PLeft: '+string(Controller.pleft));
            draw_text(W+ww, 128, 'PRight: '+string(Controller.pright));
            draw_text(W+ww, 144, '---------');
            draw_text(W+ww, 160, 'Up: '+string(Controller.up));
            draw_text(W+ww, 176, 'Down: '+string(Controller.down));
            draw_text(W+ww, 192, 'Right: '+string(Controller.right));
            draw_text(W+ww, 208, 'Left: '+string(Controller.left));
            break;
        case Misc.debug_world_variables:
            draw_text(W+32, 48, 'Game Status ID: '+string(status_id));
            draw_text(W+32, 64, 'frames: '+string(frames));
            draw_text(W+32, 80, 'time_load_finish: '+string(time_load_finish));
            draw_text(W+32, 96, '    draw_atmosphere: '+string(time_draw_atmosphere)+'/'+string(t_time_draw_atmosphere/frames));
            draw_text(W+32, 112, '    draw_entity: '+string(time_draw_entity)+'/'+string(t_time_draw_entity/frames));
            draw_text(W+32, 128, '    draw_npc: '+string(time_draw_npc)+'/'+string(t_time_draw_npc/frames));
            draw_text(W+32, 144, '    draw_other: '+string(time_draw_other)+'/'+string(t_time_draw_other/frames));
            break;
        case Misc.debug_instances:
            draw_text(W+32, 48, 'Instances: '+string(instance_count));
            draw_text(W+32, 64, '----------------');
            draw_text(W+32, 80, 'Entities: '+string(instance_number(Entity)));
            draw_text(W+32, 96, 'Structs (active): '+string(instance_number(Struct)));
    //        draw_text(W+32, 96, 'Anim: '+string(instance_number(Struct)));
            break;
        case Misc.debug_random_stats:
            draw_text(W+32, 48, 'Comets dropped: '+string(us_comets));
            /* Unlisted stats:
             *  - cell swap time (us_cell_swap_time and us_cell_swap_times)
             */
            break;
        case Misc.debug_player_stats:
            draw_text(W+32, 48, 'Player Stats');
            draw_text(W+32, 64, 'xspeed: '+string(dbg_xspeed));
            draw_text(W+32, 80, 'yspeed: '+string(dbg_yspeed));
            draw_text(W+32, 96, 'zspeed: '+string(dbg_zspeed));
            draw_text(W+32, 112, 'movement_state: '+string(dbg_movement_state));
            draw_text(W+32, 128, 'below: '+string(Player.below)+'['+location_flag_names[Player.below_location_flag]+']');
            draw_text(W+32, 144, 'Camera Z: '+string(Camera.z));
            draw_text(W+32, 160, 'Camera Direction: '+string(Camera.direction));
            draw_text(W+32, 176, 'Camera Pitch: '+string(Camera.pitch));
            draw_text(W+32, 192, 'Soaring: '+tf[Player.soaring]);
            break;
        case Misc.debug_internal_stats:
            draw_text(W+32, 48, 'Internal Stats');
            draw_text(W+32, 64, 'keyboard_string:');
            draw_text(W+32, 80, keyboard_string);
            break;
    }
    
    switch (keyboard_key){
        case vk_numpad0:
            debug_panel=Misc.debug_main;
            break;
        case vk_numpad1:
            debug_panel=Misc.debug_weather;
            break;
        case vk_numpad2:
            debug_panel=Misc.debug_input;
            break;
        case vk_numpad3:
            debug_panel=Misc.debug_world_variables;
            break;
        case vk_numpad4:
            debug_panel=Misc.debug_instances;
            break;
        case vk_numpad5:
            debug_panel=Misc.debug_random_stats;
            break;
        case vk_numpad6:
            debug_panel=Misc.debug_player_stats;
            break;
        case vk_numpad7:
            debug_panel=Misc.debug_internal_stats;
            break;
        case vk_numpad8:
            break;
        case vk_numpad9:
            break;
    }
    
    triangles=0;
    draw_calls=0;
    triangles_fx=0;
    draw_fx=0;
    var t_time=time_io+time_step+time_draw+time_draw_gui;
    var t_t_time=t_time_io+t_time_step+t_time_draw+t_time_draw_gui;
    draw_text_colour(W+32, 256, 'IO: '+string(time_io)+' µs ('+string(floor(t_time_io/frames))+'/'+string(floor(100*t_time_io/t_t_time))+'% avg)', c_green, c_green, c_green, c_green, true);
    draw_text_colour(W+32, 272, 'Step: '+string(time_step)+' µs ('+string(floor(t_time_step/frames))+'/'+string(floor(100*t_time_step/t_t_time))+'% avg)', c_red, c_red, c_red, c_red, true);
    draw_text_colour(W+32, 288, '3D: '+string(time_draw)+' µs ('+string(floor(t_time_draw/frames))+'/'+string(floor(100*t_time_draw/t_t_time))+'% avg)', c_orange, c_orange, c_orange, c_orange, true);
    draw_text_colour(W+32, 304, 'GUI: '+string(time_draw_gui)+' µs ('+string(floor(t_time_draw_gui/frames))+'/'+string(floor(100*t_time_draw_gui/t_t_time))+'% avg)', c_blue, c_blue, c_blue, c_blue, true);
    // this will always be one frame behind because it's drawn before the GUI time for the current frame is updated, but who really cares about one single frame
    draw_text(W+32, 384, 'Total time: '+string(t_time)+' µs ('+string(floor(((t_t_time)/frames)))+'avg)');
    draw_text(W+32, 400, '60 FPS is 16,666 µs per frame.');
    draw_text(W+32, 416, 'Try to keep Total Time as far');
    draw_text(W+32, 432, 'under that as possible.');
    
    var width=OFFSET-64;
    
    var wa=W+32;
    var wb=width*time_io/t_time;
    draw_rectangle_colour(wa, 332, wa+wb, 336, c_green, c_green, c_green, c_green, false);
    wa=wa+wb;
    wb=width*time_step/t_time;
    draw_rectangle_colour(wa, 332, wa+wb, 336, c_red, c_red, c_red, c_red, false);
    wa=wa+wb;
    wb=width*time_draw/t_time;
    draw_rectangle_colour(wa, 332, wa+wb, 336, c_orange, c_orange, c_orange, c_orange, false);
    wa=wa+wb;
    wb=width*time_draw_gui/t_time;
    draw_rectangle_colour(wa, 332, wa+wb, 336, c_blue, c_blue, c_blue, c_blue, false);
    
    draw_text(W+32, 352, 'Average:');
    
    wa=W+32;
    wb=width*t_time_io/t_t_time;
    draw_rectangle_colour(wa, 364, wa+wb, 368, c_green, c_green, c_green, c_green, false);
    wa=wa+wb;
    wb=width*t_time_step/t_t_time;
    draw_rectangle_colour(wa, 364, wa+wb, 368, c_red, c_red, c_red, c_red, false);
    wa=wa+wb;
    wb=width*t_time_draw/t_t_time;
    draw_rectangle_colour(wa, 364, wa+wb, 368, c_orange, c_orange, c_orange, c_orange, false);
    wa=wa+wb;
    wb=width*t_time_draw_gui/t_t_time;
    draw_rectangle_colour(wa, 364, wa+wb, 368, c_blue, c_blue, c_blue, c_blue, false);
    
    var xx=W+32+width/2;
    var yy=448+width/2;
    var r=width/2;
    
    r=r*0.75;
    
    r=width/2*0.8;
    var maximum=16000
    angle=225-min(scaleTo(t_time/maximum, 1, 270), 270);
    draw_line_width(xx, yy, xx+r*dcos(angle), yy-r*dsin(angle), 2);
    angle=225-min(scaleTo(t_t_time/frames/maximum, 1, 270), 270);
    draw_line_width_colour(xx, yy, xx+r*dcos(angle), yy-r*dsin(angle), 2, c_red, c_red);
    
    draw_set_alpha_test(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw 3D stuff

if (status_id==READY){
    d3d_start()
    var uniform_alpha=shader_get_uniform(shd_alpha, "alpha");
    var td_start=get_timer();
    if (keyboard_check_direct(vk_block)){
        draw_mode=Misc.block;
    } else if (keyboard_check_direct(vk_model_and_wireframe)){
        draw_mode=Misc.model_and_wireframe;
    } else if (keyboard_check_direct(vk_wireframe)){
        draw_mode=Misc.wireframe;
    } else {
        draw_mode=Misc.model;
    }
    if (game_mode_draw_world[mode]){
        if (!lm.is_indoors&amp;&amp;render_atmosphere){
            set_fog(false);
            set_lighting(false);
            draw_set_alpha(1);
        
            var fend=lm.fog_end*render_distance;
            
            // stars
            if (is_clamped(game_current_hour, 7, 17)){
                alpha_stars=lerp(alpha_stars, 0, 0.001);
            } else {
                alpha_stars=lerp(alpha_stars, 1, 0.001);
            }
            if (alpha_stars&gt;0.01&amp;&amp;weather.show_stars){
                shader_set_alpha(alpha_stars);
                draw_set_color(c_white);
                matrix(Camera.x, Camera.y, Camera.z, 0, 0, (World.frames/360)%360, 100, 100, 100);
                d3d_model_draw(model_starbox, 0, 0, 0, tex_atmosphere);
                draw_reset_transform_stack();
                shader_reset();
            }

            // clouds
            with (Gram){
                matrix(x, y, z, xrot, yrot, direction, scale, scale, scale);
//                vertex_submit(model, pr_trianglelist, World.tex_atmosphere);
                d3d_model_draw(model, 0, 0, 0, -1);
                draw_reset_transform_stack();
            }
        
            // sun
            draw_set_blend_mode(bm_add);
            matrix(Camera.x, Camera.y, Camera.z, 0, SUN_ANGLE, 0, 10000, 10000, 10000);
            d3d_model_draw(model_sun, 0, 0, 0, -1);
            draw_reset_transform_stack();
            draw_set_blend_mode(bm_normal);
        
            // moon
            var mangle=MOON_ANGLE;
            var moonz=Camera.z+42000*dsin(mangle);
            if (moonz&gt;0){
                var moonx=Camera.x+42000*dcos(mangle);
                var scl=10000/16*0.0625;   // radius of the sphere*(actual) radius of the sun
                var m1=matrix_build(42000, Camera.y+3000, 0, 0, 0, 0, scl, scl, scl);
                var m2=matrix_build(0, 0, 0, 0, mangle, 0, 1, 1, 1);
                matrix_set(matrix_world, matrix_multiply(m1, m2));
                d3d_model_draw(model_sphere, 0, 0, 0, tex_moon);
                draw_reset_transform_stack();
                // this actually doesn't work completely correctly but you might fool some people so whatever
/*                var m1=matrix_build(42000, Camera.y+3000, 0, 0, 0, 0, -scl, -scl, -scl);
                var m2=matrix_build(0, 0, 0, 0, -mangle, 0, 1, 1, 1);
                matrix_set(matrix_world, matrix_multiply(m1, m2));
                d3d_model_draw(model_sphere, 0, 0, 0, tex_moon);
                draw_reset_transform_stack();*/
            }
        }
        var td_a=get_timer();
        time_draw_atmosphere=td_a-td_start;
        t_time_draw_atmosphere+=time_draw_atmosphere;
        
        set_lighting(true);
        set_fog(true);
        
        // Render the stuff IN the game world.
        
        draw_set_color(c_white);
        var td_b=get_timer();
        
        // Entity things
        // Do it like this beacuse using with() is slow as hell . . .

        var hidden_objects=ds_list_create();
        for (var i=0; i&lt;ds_list_size(ALL_SELECTABLE); i++){
            var selectable=ALL_SELECTABLE[| i];
            with (selectable) if (loaded){
                if (!instanceof(EntityNPC)&amp;&amp;!instanceof(Player)){
                    if (World.selected!=selectable){
                        if (hidden){
                            ds_list_add(hidden_objects, id);
                        } else {
                            var mo=get_model_object();
                            if (mo.model_render_distance==RD_EXTREMELY_FAR||within_sight(x, y, mo.model_render_distance/RD_FAR)){
/*                                c_object_set_mask(object, 0, 0);
                                c_object_set_mask(Player.object, 0, 0);*/
                                if (!occlude_me()){
                                    script_execute(render_script);
                                }
  /*                              c_object_set_mask(object, mask, mask);
                                c_object_set_mask(Player.object, Player.mask, Player.mask);*/
                            }
                        }
                    } else {
                        script_execute(render_script, get_editor_texture(id));
                    }
                }
            }
        }
        // Hidden objects go last, because Game Maker sucks at transparency ლ(ಠ益ಠლ)
        
        for (var i=0; i&lt;ds_list_size(hidden_objects); i++){
            var selectable=hidden_objects[| i];
            with (selectable) if (loaded){
                var mo=get_model_object();
                if (mo.model_render_distance==RD_EXTREMELY_FAR||within_sight(x, y, mo.model_render_distance/RD_FAR)){
/*                    c_object_set_mask(object, 0, 0);
                    c_object_set_mask(Player.object, 0, 0);*/
                    if (!occlude_me()){
                        script_execute(render_script);
                    }
/*                    c_object_set_mask(object, mask, mask);
                    c_object_set_mask(Player.object, Player.mask, Player.mask);                    */
                }
            }
        }
        ds_list_destroy(hidden_objects);
        var td_c=get_timer();
        time_draw_entity=td_c-td_b;
        t_time_draw_entity+=time_draw_entity;
        // NPC things
        // . . . but it really ought to be done like this because NPCs and everything else
        // reside on different texture pages.

        draw_set_color(c_white);
        set_lighting(false);
        d3d_set_culling(false);
        
        for (var i=0; i&lt;ds_list_size(ALL_NPC); i++){
            with (ALL_NPC[| i]) if (loaded){
                if (World.selected!=id){
                    if (within_sight(x, y, 0.25)){
/*                        c_object_set_mask(object, 0, 0);
                        c_object_set_mask(Player.object, 0, 0);*/
                        if (!occlude_me()){
                            script_execute(render_script);
                            if (equip_weapon&gt;0){
                                script_execute(all_weapon_graphics[ds_map_find_value(all_mod_packages, equip_weapon_package).my_items[equip_weapon].weapon_graphic].script);
                            }
                            if (equip_shield&gt;0){
                                script_execute(all_weapon_graphics[ds_map_find_value(all_mod_packages, equip_shield_package).my_items[equip_shield].weapon_graphic].script);
                            }
                        }
/*                        c_object_set_mask(object, mask, mask);
                        c_object_set_mask(Player.object, Player.mask, Player.mask);*/
                    }
                } else {
                    script_execute(render_script, get_editor_texture(id));
                }
            }
        }
        
        with (Player){
            script_execute(render_script);
            if (get_class().weilding){
                if (equip_weapon&gt;0){
                    script_execute(all_weapon_graphics[ds_map_find_value(all_mod_packages, equip_weapon_package).my_items[equip_weapon].weapon_graphic].script);
                }
                if (equip_shield&gt;0){
                    var shield_alpha=0.6;
                    shader_set(shd_alpha);
                    shader_set_uniform_f(uniform_alpha, ternary(Camera.pov==CameraPOV.cam_first, shield_alpha, 1));
                    script_execute(all_weapon_graphics[ds_map_find_value(all_mod_packages, equip_shield_package).my_items[equip_shield].weapon_graphic].script);
                    shader_reset();
                }
            }
        }
        var td_d=get_timer();
        time_draw_npc=td_d-td_c;
        t_time_draw_npc+=time_draw_npc;
        // the weather and effects and stuff would look pretty bad if it had lighting and fog tbh
        d3d_set_fog(false, c_black, 0, 1);
        with (Effect){
            script_execute(render);
        }
        
        // If you're in debug mode, draw the teleport point, radius and load radius of the active location
        if (game_mode_is_debug[mode]&amp;&amp;edit_map_active_location!=noone){
            with (edit_map_active_location){
                // direction is +90 degrees because I screwed up the model
                matrix(teleport_x, teleport_y, teleport_z, 0, 0, teleport_direction+90, 1, 1, 1);
                d3d_model_draw_selective(ds_map_find_value(all_mod_packages, BASE_ASSET).my_models[World.mdl_teleport_marker].model_array[0], 0, 0, 0, -1, BASE_ASSET, World.mdl_teleport_marker);
                draw_reset_transform_stack();
            }
            shader_set(shd_alpha);
            shader_set_uniform_f(uniform_alpha, 0.5);
            with (edit_map_active_location){
                draw_sphere(x, y, z, radius, -1);
            }
            shader_set_uniform_f(uniform_alpha, 0.25);
            with (edit_map_active_location){
                draw_sphere(x, y, z, radius_load, -1);
            }
            shader_reset();
        }
        
        // Reset the fog
        set_fog(true);
        
        draw_reset_transform_stack();
        
        for (var i=0; i&lt;ds_list_size(list_lights); i++){
            with (list_lights[| i]){
                draw_effect_light();
            }
        }
        
        draw_reset_transform_stack();
        // Floaty markers
        if (show_floaty_markers){
            for (var i=0; i&lt;ds_list_size(Player.active_quests); i++){
                var q=Player.active_quests[| i];
                if (q.active){
                    var stage=q.stages[| q.active_stage];
                    if (stage.floaty_marker&gt;0){
                        var actor=ds_map_find_value(all_mod_packages, stage.floaty_marker_package).my_npcs[stage.floaty_marker].actor;
                        if (instance_exists(actor)&amp;&amp;(point_distance(Camera.x, Camera.y, actor.x, actor.y)&lt;2*RD_EXTREMELY_FAR)){
                            draw_compass_point(CompassPoints.Default, actor);
                        }
                    }
                }
            }
        }
        d3d_transform_set_identity();
        
        // Weather
        script_execute(weather.script);
        
        // Water
        if (lm.draw_water){
            var wx=(Camera.x div 1024)*1024;
            var wy=(Camera.y div 1024)*1024;
            var m=matrix(wx, wy, 0, 0, 0, 0, 1, 1, 1);
            set_fog(false);
            set_lighting(false);
            d3d_set_culling(true);
            draw_set_colour(c_water);
            d3d_model_draw(model_water, 0, 0, 0.75, -1);
//            d3d_model_draw(model_water, 32*dsin(frames/4), 0, 0, tex_atmosphere);
//            shader_set(shd_water_top);
            draw_set_blend_mode(bm_add);    // This prevents the water from being rendered black-ish.
            d3d_model_draw(model_water, 0, 32*dcos(frames/4), 1, water_texture);
            draw_reset_transform_stack();
            draw_set_blend_mode(bm_normal);
//            shader_reset();
        }
        var td_e=get_timer();
        time_draw_other=td_e-td_d;
        t_time_draw_other+=time_draw_other;
        
        // Anything else that wants culling turned off
        if (mode==GameModes.edit_generation){
            draw_set_color(c_blue);
            draw_set_alpha(0.5);
            d3d_draw_block(edit_generation_x1, edit_generation_y1, 0, edit_generation_x2, edit_generation_y2, 4096, -1, 1, 1);
            draw_set_alpha(1);
        }
        
        d3d_set_culling(true);
        
        if (game_mode_is_debug[mode]){
            // Camera (teleport) icons
            for (var i=0; i&lt;ds_grid_width(teleport_spots); i++){
                var xx=teleport_spots[# i, 1];
                var yy=teleport_spots[# i, 2];
                var zz=teleport_spots[# i, 3];
                var d=point_distance(Camera.x, Camera.y, xx, yy);
                if (is_clamped(d, 32, 2*RD_EXTREMELY_FAR)){
                    d3d_transform_set_scaling(0.25, 0.25, 0.25);
                    d3d_transform_add_translation(xx, yy, zz);
                    d3d_model_draw(model_sphere, 0, 0, 0, background_get_texture(b_teleport));
                }
            }
            d3d_transform_set_identity();
        }
        
        // anything else that's independant of lighting
    }
    time_draw=get_timer()-td_start;
    t_time_draw=t_time_draw+time_draw;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
