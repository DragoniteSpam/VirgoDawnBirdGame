<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_button_threshold(0, 0.1);

reserved_pov=CameraPOV.cam_first;    // stores the POV of the camera for the editor
game_has_focus=window_has_focus();

// Joystick information
rs_angle=0;
ls_angle=0;
rs_magnitude=0;
ls_magnitude=0;
rs_x=0;
rs_y=0;
ls_x=0;
ls_y=0;

// Change in joystick information
d_rs_angle=0;
d_ls_angle=0;
d_rs_magnitude=0;
d_ls_magnitude=0;
d_ls_x=0;
d_ls_y=0;
d_rs_x=0;
d_rs_y=0;

// General
hasInput=false;
pressInput=false;
releaseInput=false;

up=false;
down=false;
left=false;
right=false;
a=false;
b=false;
x=false;
y=false;
l=false;
r=false;
l2=false;
r2=false;
ls=false;
rs=false;
rup=false;
rdown=false;
rleft=false;
rright=false;
pup=false;
pdown=false;
pleft=false;
pright=false;
start=false;
select=false;

console=false;
press_console=false;
release_console=false;
last_console=false;

// Previous input
last_up=false;
last_down=false;
last_left=false;
last_right=false;
last_a=false;
last_b=false;
last_x=false;
last_y=false;
last_l=false;
last_r=false;
last_l2=false;
last_r2=false;
last_ls=false;
last_rs=false;
last_rup=false;
last_rdown=false;
last_rleft=false;
last_rright=false;
last_pup=false;
last_pdown=false;
last_pleft=false;
last_pright=false;
last_start=false;
last_select=false;

// Change input
press_up=false;
press_down=false;
press_left=false;
press_right=false;
press_a=false;
press_b=false;
press_x=false;
press_y=false;
press_l=false;
press_r=false;
press_l2=false;
press_r2=false;
press_ls=false;
press_rs=false;
press_rup=false;
press_rdown=false;
press_rleft=false;
press_rright=false;
press_pup=false;
press_pdown=false;
press_pleft=false;
press_pright=false;
press_start=false;
press_select=false;

release_up=false;
release_down=false;
release_left=false;
release_right=false;
release_a=false;
release_b=false;
release_x=false;
release_y=false;
release_l=false;
release_r=false;
release_l2=false;
release_r2=false;
release_ls=false;
release_rs=false;
release_rup=false;
release_rdown=false;
release_rleft=false;
release_rright=false;
release_pup=false;
release_pdown=false;
release_pleft=false;
release_pright=false;
release_start=false;
release_select=false;

// Common terms
interact=a;
back=b||select;
pause=x||start;
run=l2;
jump=y;

last_interact=false;
last_back=false;
last_pause=false;
last_run=false;
last_jump=false;

press_interact=false;
press_back=false;
press_pause=false;
press_run=false;
press_jump=false;

release_interact=false;
release_back=false;
release_pause=false;
release_run=false;
release_jump=false;

dur_b=0;

CONTROL=false;

// Labels

globalvar control_button_images, control_keyboard_text;

control_button_images[DEFAULT_GP_A]=b_button_360_a;
control_button_images[DEFAULT_GP_B]=b_button_360_b;
control_button_images[DEFAULT_GP_X]=b_button_360_x;
control_button_images[DEFAULT_GP_Y]=b_button_360_y;
control_button_images[DEFAULT_GP_START]=b_button_360_start;
control_button_images[DEFAULT_GP_SELECT]=b_button_360_back;
control_button_images[DEFAULT_GP_L]=b_button_360_l;
control_button_images[DEFAULT_GP_R]=b_button_360_r;
control_button_images[DEFAULT_GP_L2]=b_button_360_l2;
control_button_images[DEFAULT_GP_R2]=b_button_360_r2;
control_button_images[DEFAULT_GP_LS]=b_button_360_ls;
control_button_images[DEFAULT_GP_RS]=b_button_360_rs;
control_button_images[DEFAULT_GP_PADU]=b_button_360_up;
control_button_images[DEFAULT_GP_PADR]=b_button_360_right;
control_button_images[DEFAULT_GP_PADL]=b_button_360_left;
control_button_images[DEFAULT_GP_PADD]=b_button_360_down;

for (var i=255; i&gt;=0; i--){
    control_keyboard_text[i]='';
}

for (var i=ord('A'); i&lt;=ord('Z'); i++){
    control_keyboard_text[i]=chr(i);
}

control_keyboard_text[vk_escape]=get_text(Text.keyEscape);
control_keyboard_text[vk_tab]=get_text(Text.keyTab);
control_keyboard_text[vk_lcontrol]=get_text(Text.keyLControl);
control_keyboard_text[vk_lshift]=get_text(Text.keyLShift);
control_keyboard_text[vk_lalt]=get_text(Text.keyLAlt);
control_keyboard_text[vk_rcontrol]=get_text(Text.keyRControl);
control_keyboard_text[vk_rshift]=get_text(Text.keyRShift);
control_keyboard_text[vk_ralt]=get_text(Text.keyRAlt);
control_keyboard_text[vk_space]=get_text(Text.keySpace);
control_keyboard_text[vk_enter]=get_text(Text.keyEnter);
control_keyboard_text[vk_backspace]=get_text(Text.keyBackspace);
control_keyboard_text[vk_up]=get_text(Text.keyUp);
control_keyboard_text[vk_down]=get_text(Text.keyDown);
control_keyboard_text[vk_left]=get_text(Text.keyLeft);
control_keyboard_text[vk_right]=get_text(Text.keyRight);
control_keyboard_text[vk_lmouse]=get_text(Text.keyLMouse);
control_keyboard_text[vk_mmouse]=get_text(Text.keyMMouse);
control_keyboard_text[vk_rmouse]=get_text(Text.keyRMouse);
control_keyboard_text[vk_insert]=get_text(Text.keyInsert);
control_keyboard_text[vk_delete]=get_text(Text.keyDelete);
control_keyboard_text[vk_home]=get_text(Text.keyHome);
control_keyboard_text[vk_end]=get_text(Text.keyEnd);
control_keyboard_text[vk_pageup]=get_text(Text.keyPgUp);
control_keyboard_text[vk_pagedown]=get_text(Text.keyPgDown);

// Bound buttons

gp_bind_a=DEFAULT_GP_A;
gp_bind_b=DEFAULT_GP_B;
gp_bind_x=DEFAULT_GP_X;
gp_bind_y=DEFAULT_GP_Y;
gp_bind_start=DEFAULT_GP_START;
gp_bind_select=DEFAULT_GP_SELECT;
gp_bind_l=DEFAULT_GP_L;
gp_bind_r=DEFAULT_GP_R;
gp_bind_l2=DEFAULT_GP_L2;
gp_bind_r2=DEFAULT_GP_R2;
gp_bind_ls=DEFAULT_GP_LS;
gp_bind_rs=DEFAULT_GP_RS;
gp_bind_padu=DEFAULT_GP_PADU;
gp_bind_padd=DEFAULT_GP_PADD;
gp_bind_padl=DEFAULT_GP_PADL;
gp_bind_padr=DEFAULT_GP_PADR;

mk_bind_a_a=DEFAULT_MK_A_A;
mk_bind_a_b=DEFAULT_MK_A_B;
mk_bind_b=DEFAULT_MK_B;
mk_bind_x=DEFAULT_MK_X;
mk_bind_y=DEFAULT_MK_Y;
mk_bind_start=DEFAULT_MK_START;
mk_bind_select=DEFAULT_MK_SELECT;
mk_bind_l=DEFAULT_MK_L;
mk_bind_r=DEFAULT_MK_R;
mk_bind_l2=DEFAULT_MK_L2;
mk_bind_r2=DEFAULT_MK_R2;
mk_bind_ls=DEFAULT_MK_LS;
mk_bind_rs=DEFAULT_MK_RS;
mk_bind_padu=DEFAULT_MK_PADU;
mk_bind_padd=DEFAULT_MK_PADD;
mk_bind_padl=DEFAULT_MK_PADL;
mk_bind_padr=DEFAULT_MK_PADR;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_has_focus=window_has_focus();
var t_io_start=get_timer();
if (game_has_focus){
    WW=window_get_width()-OFFSET;
    HH=window_get_height();
    MOUSE_X=(window_mouse_get_x()/WW)*W;
    MOUSE_Y=(window_mouse_get_y()/HH)*H;
    
    // Shift input to previous input
    
    var lastL=ls_angle;
    var lastR=rs_angle;
    var lastInput=hasInput;
    var lastLM=ls_magnitude;
    var lastRM=rs_magnitude;
    var lastRSX=rs_x;
    var lastRSY=rs_y;
    var lastLSX=ls_x;
    var lastLSY=ls_y;
    
    last_up=up;
    last_down=down;
    last_left=left;
    last_right=right;
    last_a=a;
    last_b=b;
    last_x=x;
    last_y=y;
    last_l=l;
    last_r=r;
    last_l2=l2;
    last_r2=r2;
    last_ls=ls;
    last_rs=rs;
    last_rup=rup;
    last_rdown=rdown;
    last_rleft=rleft;
    last_rright=rright;
    last_pup=pup;
    last_pdown=pdown;
    last_pleft=pleft;
    last_pright=pright;
    last_start=start;
    last_select=select;
    
    last_interact=interact;
    last_back=back;
    last_pause=pause;
    last_run=run;
    last_jump=jump;
    
    if (gamepad_is_connected(0)){
        // If controller, gather raw input first. Can't be done all in one call because different buttons have
        // different functions to check them.
        ls_x=gamepad_axis_value(0, gp_axislh);
        ls_y=gamepad_axis_value(0, gp_axislv);
        rs_x=gamepad_axis_value(0, gp_axisrh);
        rs_y=gamepad_axis_value(0, gp_axisrv);
    
        a=gamepad_button_check(0, gp_bind_a);
        b=gamepad_button_check(0, gp_bind_b);
        x=gamepad_button_check(0, gp_bind_x);
        y=gamepad_button_check(0, gp_bind_y);
        start=gamepad_button_check(0, gp_bind_start);
        select=gamepad_button_check(0, gp_bind_select);
        l=gamepad_button_check(0, gp_bind_l);
        r=gamepad_button_check(0, gp_bind_r);
        l2=gamepad_button_check(0, gp_bind_l2);
        r2=gamepad_button_check(0, gp_bind_r2);
        ls=gamepad_button_check(0, gp_bind_ls);
        rs=gamepad_button_check(0, gp_bind_rs);
        pup=gamepad_button_check(0, gp_bind_padu);
        pdown=gamepad_button_check(0, gp_bind_padd);
        pleft=gamepad_button_check(0, gp_bind_padl);
        pright=gamepad_button_check(0, gp_bind_padr);
    } else {
        // The keyboard can gather exact input directly from the keyboard, since all button checks are the same
        ls_x=0;
        ls_y=0;
        rs_x=0;
        rs_y=0;
        a=false;
        b=false;
        x=false;
        y=false;
        start=false;
        select=false;
        l=false;
        r=false;
        l2=false;
        r2=false;
        ls=false;
        rs=false;
        pup=false;
        pdown=false;
        pleft=false;
        pright=false;
    }
    // Combine with keyboard input
    ls_x=ls_x-keyboard_check_direct(ord('A'))+keyboard_check_direct(ord('D'));
    ls_y=ls_y-keyboard_check_direct(ord('W'))+keyboard_check_direct(ord('S'));
    rs_x=rs_x+clamp((MOUSE_X-W/2)/16, -1, 1);
    rs_y=rs_y+clamp((MOUSE_Y-H/2)/16, -1, 1);
    
    up=MatchCardinalDirection(ls_angle, ls_y, Directions.north);
    down=MatchCardinalDirection(ls_angle, ls_y, Directions.south);
    left=MatchCardinalDirection(ls_angle, ls_x, Directions.west);
    right=MatchCardinalDirection(ls_angle, ls_x, Directions.east);
    if (COMPILED){
        if (mk_bind_a_a==vk_lmouse||mk_bind_a_b==vk_lmouse)
            a=mouse_check_button(mb_left)||a;
    } else {
        a=keyboard_check_direct(mk_bind_a_a)||keyboard_check_direct(mk_bind_a_b)||a;
    }
    if (COMPILED){
        if (mk_bind_b==vk_rmouse)
            b=mouse_check_button(mb_right)||b;
    } else {
        b=keyboard_check_direct(mk_bind_b)||b;
    }
    x=keyboard_check_direct(mk_bind_x)||x;
    y=keyboard_check_direct(mk_bind_y)||y;
    
    start=keyboard_check_direct(mk_bind_start)||start;
    select=keyboard_check_direct(mk_bind_select)||select;
    l=keyboard_check_direct(mk_bind_l)||l;
    r=keyboard_check_direct(mk_bind_r)||r;
    l2=keyboard_check_direct(mk_bind_l2)||l2;
    r2=keyboard_check_direct(mk_bind_r2)||r2;
    ls=keyboard_check_direct(mk_bind_ls)||ls;
    rs=keyboard_check_direct(mk_bind_rs)||rs;
    
    l3=mouse_wheel_up();
    r3=mouse_wheel_down();
    
    with (World){
        if (!cursor_is_free&amp;&amp;mode==GameModes.play){
            centerCursor();
        }
    }
    
    if (invert_y)
        rs_y=-rs_y;
    if (invert_x)
        rs_x=-rs_x;
    
    ls_angle=GetStickAngle(ls_x, ls_y);
    ls_magnitude=GetStickMagnitude(ls_x, ls_y);
    up=MatchCardinalDirection(ls_angle, ls_magnitude, Directions.north);
    down=MatchCardinalDirection(ls_angle, ls_magnitude, Directions.south);
    left=MatchCardinalDirection(ls_angle, ls_magnitude, Directions.west);
    right=MatchCardinalDirection(ls_angle, ls_magnitude, Directions.east);
    
    rs_angle=GetStickAngle(rs_x, rs_y);
    rs_magnitude=GetStickMagnitude(rs_x, rs_y);
    rup=MatchCardinalDirection(rs_angle, rs_magnitude, Directions.north);
    rdown=MatchCardinalDirection(rs_angle, rs_magnitude, Directions.south);
    rleft=MatchCardinalDirection(rs_angle, rs_magnitude, Directions.west);
    rright=MatchCardinalDirection(rs_angle, rs_magnitude, Directions.east);
    
    pup=pup||keyboard_check_direct(mk_bind_padu);
    pdown=pdown||keyboard_check_direct(mk_bind_padd);
    pleft=pleft||keyboard_check_direct(mk_bind_padl);
    pright=pright||keyboard_check_direct(mk_bind_padr);
    
    if (abs(ls_x)&lt;0.1)
        ls_x=0;
    if (abs(ls_y)&lt;0.1)
        ls_y=0;
    if (abs(rs_x)&lt;0.1)
        rs_x=0;
    if (abs(rs_y)&lt;0.1)
        rs_y=0;
    
    // Change in stick angles
    d_rs_angle=(rs_angle-lastR+360) mod 360;
    d_ls_angle=(ls_angle-lastL+360) mod 360;
    d_ls_magnitude=ls_magnitude-lastLM;
    d_rs_magnitude=rs_magnitude-lastRM;
    
    // Update change input
    hasInput=(up||down||left||right);
    pressInput=((!lastInput)&amp;&amp;hasInput);
    releaseInput=(lastInput&amp;&amp;(!hasInput));
    
    press_up=(!last_up)&amp;&amp;up;
    press_down=(!last_down)&amp;&amp;down;
    press_left=(!last_left)&amp;&amp;left;
    press_right=(!last_right)&amp;&amp;right;
    press_a=(!last_a)&amp;&amp;a;
    press_b=(!last_b)&amp;&amp;b;
    press_x=(!last_x)&amp;&amp;x;
    press_y=(!last_y)&amp;&amp;y;
    press_l=(!last_l)&amp;&amp;l;
    press_r=(!last_r)&amp;&amp;r;
    press_l2=(!last_l2)&amp;&amp;l2;
    press_r2=(!last_r2)&amp;&amp;r2;
    press_ls=(!last_ls)&amp;&amp;ls;
    press_rs=(!last_rs)&amp;&amp;rs;
    press_rup=(!last_rup)&amp;&amp;rup;
    press_rdown=(!last_rdown)&amp;&amp;rdown;
    press_rleft=(!last_rleft)&amp;&amp;rleft;
    press_rright=(!last_rright)&amp;&amp;rright;
    press_pup=(!last_pup)&amp;&amp;pup;
    press_pdown=(!last_rdown)&amp;&amp;pdown;
    press_pleft=(!last_pleft)&amp;&amp;pleft;
    press_pright=(!last_pright)&amp;&amp;pright;
    press_start=(!last_start)&amp;&amp;start;
    press_select=(!last_select)&amp;&amp;select;
    
    release_up=last_up&amp;&amp;(!up);
    release_down=last_down&amp;&amp;(!down);
    release_left=last_left&amp;&amp;(!left);
    release_right=last_right&amp;&amp;(!right);
    release_a=last_a&amp;&amp;(!a);
    release_b=last_b&amp;&amp;(!b);
    release_x=last_x&amp;&amp;(!x);
    release_y=last_y&amp;&amp;(!y);
    release_l=last_l&amp;&amp;(!l);
    release_r=last_r&amp;&amp;(!r);
    release_l2=last_l2&amp;&amp;(!l2);
    release_r2=last_r2&amp;&amp;(!r2);
    release_ls=last_ls&amp;&amp;(!ls);
    release_rs=last_rs&amp;&amp;(!rs);
    release_rup=last_rup&amp;&amp;(!rup);
    release_rdown=last_rdown&amp;&amp;(!rdown);
    release_rleft=last_rleft&amp;&amp;(!rleft);
    release_rright=last_rright&amp;&amp;(!rright);
    release_pup=last_pup&amp;&amp;(!pup);
    release_pdown=last_pdown&amp;&amp;(!pdown);
    release_pleft=last_pleft&amp;&amp;(!pleft);
    release_pright=last_pright&amp;&amp;(!pright);
    release_start=last_start&amp;&amp;(!start);
    release_select=last_select&amp;&amp;(!select);
    
    // Update common terms
    interact=a;
    back=b||select;
    pause=x||start;
    run=l2;
    jump=y;
    
    press_interact=(!last_interact)&amp;&amp;interact;
    press_back=(!last_back)&amp;&amp;back;
    press_pause=(!last_pause)&amp;&amp;pause;
    press_run=(!last_run)&amp;&amp;run;
    press_jump=(!last_jump)&amp;&amp;jump;
    
    release_interact=last_interact&amp;&amp;(!interact);
    release_back=last_back&amp;&amp;(!back);
    release_pause=last_pause&amp;&amp;(!pause);
    release_run=last_run&amp;&amp;(!run);
    release_jump=last_jump&amp;&amp;(!jump);
    
    // if you do this for any other buttons, implement it here.
    if (press_b){
        dur_b=0;
    } else {
        dur_b++;
    }
    
    CONTROL=keyboard_check(vk_control);
    
    with (World){
        if (keyboard_check_pressed(vk_f1)){
            if (Player.free&amp;&amp;HasItem(BASE_ASSET, it_help)){
                item_show_book(BookCodes.Help);
            }
        } else if (keyboard_check_pressed(vk_f2)){
            switch (mode){
                case GameModes.play:
                    mode=GameModes.edit_object;
                    Player.free=false;
                    Controller.reserved_pov=Camera.pov;
                    Camera.pov=CameraPOV.cam_free;
                    if (Camera.pov==CameraPOV.cam_first){
                        Camera.x=Player.x;
                        Camera.y=Player.y;
                        Camera.z=Player.z+25;
                        Camera.direction=Player.direction;
                        Camera.pitch=Player.pitch;
                        
                    }
                    break;
                case GameModes.title:
                    AddNotification(get_text(Text.utilNoTitleDebug));
                    break;
                default:
                    // Probably one of the editor modes
                    mode=GameModes.play;
                    Player.free=true;
                    Camera.pov=Controller.reserved_pov;
                    editor_selection_clear();
                    if (Controller.b){  // hopefully 'b' will never be used for another command
                        Player.x=Camera.x;  // at the same time, since it's generally only used
                        Player.y=Camera.y;  // for 'go back' anyway
                        Player.z=max(0, Camera.z-25);
                        Player.direction=Camera.direction;
                        Player.pitch=Camera.pitch;
                    }
                    break;
            }
        } else if (keyboard_check_pressed(vk_f3)){
            if (debug&amp;&amp;mode!=GameModes.play){
                    // toggle camera
                    if (Camera.pov==CameraPOV.cam_free)
                        Camera.pov=CameraPOV.cam_edit_top;
                    else
                        Camera.pov=CameraPOV.cam_free;
            }
        } else if (keyboard_check_pressed(vk_f4)){
        }
        // f4 is also used for the debug stats overlay
        // f5 is also for a few things in the Object editor
    }
}

World.time_io=get_timer()-t_io_start;
World.t_time_io+=World.time_io;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
