<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize all variables

x=0;
y=0;
z=50;
xto=0;
yto=1000;
zto=0;
distance=192;
pov=CameraPOV.cam_free;
stored_2d_pov=CameraPOV.cam_first;
xspeed=0;
yspeed=0;
zspeed=0;
xup=0;
yup=0;
zup=1;
free=true;
pitch=0;
plane_2d=CameraPlanes.xaxis;

xtoprevious=0;
ytoprevious=1000;
ztoprevious=0;
zprevious=50;

active_fova=0;
archery_fova=0;

hook=Player;    // who the camera is based on
hook_to=noone;  // who the camera is aimed at

methods=methods_camera(ds_map_create());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>Camera</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zprevious=z;
xtoprevious=xto;
ytoprevious=yto;
ztoprevious=zto;

if (free){
    switch (pov){
        case CameraPOV.cam_free:
            switch (mode){
                case GameModes.play:    // n/a (I hope)
                    break;
                case GameModes.title:   // title camera
                    x=GAME_TITLE_X;
                    y=GAME_TITLE_Y;
                    z=GAME_TITLE_Z;
                    direction=GAME_TITLE_DIRECTION;
                    pitch=-3.5;
                    xto=x+dcos(direction);
                    yto=y-dsin(direction);
                    zto=z-dsin(pitch);
                    break;
                default:    // free camera
                    var mspd=(min(log10(max(abs(z), 1))*8, 320)+1)/World.delta_time_seconds;
                    xspeed=0;
                    yspeed=0;
                    zspeed=0;
                    if (Controller.up){
                        xspeed=dcos(direction)*mspd*World.delta_time_seconds;
                        yspeed=-dsin(direction)*mspd*World.delta_time_seconds;
                        zspeed=-dsin(pitch)*mspd*World.delta_time_seconds;
                    }
                    if (Controller.down){
                        xspeed=-dcos(direction)*mspd*World.delta_time_seconds;
                        yspeed=dsin(direction)*mspd*World.delta_time_seconds;
                        zspeed=dsin(pitch)*mspd*World.delta_time_seconds;
                    }
                    if (Controller.left){
                        xspeed=-dsin(direction)*mspd*World.delta_time_seconds;
                        yspeed=-dcos(direction)*mspd*World.delta_time_seconds;
                    }
                    if (Controller.right){
                        xspeed=dsin(direction)*mspd*World.delta_time_seconds;
                        yspeed=dcos(direction)*mspd*World.delta_time_seconds;
                    }
                    if (mouse_check_button(mb_middle)){
                        direction=movement_get_direction(direction);
                        pitch=movement_get_pitch(pitch);
                        centerCursor();
                        xto=x+dcos(direction);
                        yto=y-dsin(direction);
                        zto=z-dsin(pitch);
                    }
                    x+=xspeed;
                    y+=yspeed;
                    z+=zspeed;
                    xto+=xspeed;
                    yto+=yspeed;
                    zto+=zspeed;
                    xup=0;
                    yup=0;
                    zup=1;
                    break;
            }
            break;
        case CameraPOV.cam_first:    // First person
            if (hook_to!=noone){
                x=hook.x;
                y=hook.y;
                z=hook.z+EYE_LEVEL;
                xto=lerp(xto, hook_to.x, 0.05);
                yto=lerp(yto, hook_to.y, 0.05);
//                zto=lerp(zto, hook_to.z+EYE_LEVEL, 0.05);
                xup=0;
                yup=0;
                zup=1;
            } else {
                if (mode==GameModes.title){
                    pov=CameraPOV.cam_free;
                }
                x=hook.x;
                y=hook.y;
                z=hook.z+EYE_LEVEL;
//                direction=hook.direction;
//                pitch=hook.pitch;
                xto=x+dcos(direction);
                yto=y-dsin(direction);
                zto=z-dsin(pitch);
                xup=0;
                yup=0;
                zup=1;
                if (hook.persistant_movement_state==MovementStates.surfing){
                    z=z-8;
                    zto=zto-8;
                }
            }
            break;
        case CameraPOV.cam_third:
            if (hook_to!=noone){
                x=hook.x;
                y=hook.y;
                z=hook.z+EYE_LEVEL;
                xto=hook_to.x;
                yto=hook_to.y;
//                zto=lerp(zto, hook_to.z+EYE_LEVEL, 0.05);
                xup=0;
                yup=0;
                zup=1;
            } else {
//                direction=hook.direction;
//                pitch=hook.pitch;
                // camera movement zoom?
                x=hook.x-dcos(direction)*distance;
                y=hook.y+dsin(direction)*distance;
                z=hook.z+clamp(hook.height, EYE_LEVEL, HEAD_LEVEL)+dsin(pitch)*distance;
                xto=hook.x;
                yto=hook.y;
                zto=hook.z+EYE_LEVEL;
                xup=0;
                yup=0;
                zup=1;
                if (hook.persistant_movement_state==MovementStates.surfing){
                    z=z-8;
                    zto=zto-8;
                }
                c_object_set_mask(Player.object, 0, 0);
                if (c_raycast_world(hook.x, hook.y, hook.z+EYE_LEVEL, x, y, z, COLLISION_PRIMARY)){
                    x=c_hit_x()+c_hit_nx();
                    y=c_hit_y()+c_hit_ny();
                    z=c_hit_z()+c_hit_nz();
                }
                c_object_set_mask(Player.object, Player.mask, Player.mask);
            }
            break;
        case CameraPOV.cam_edit_top:
            var mspd=min(log10(max(z, 1))*8, 320)+1;
            if (Controller.up){
                x=x+dcos(direction)*mspd;
                y=y-dsin(direction)*mspd;
            }
            if (Controller.down){
                x=x-dcos(direction)*mspd;
                y=y+dsin(direction)*mspd;
            }
            if (Controller.left){
                x=x-dsin(direction)*mspd;
                y=y-dcos(direction)*mspd;
            }
            if (Controller.right){
                x=x+dsin(direction)*mspd;
                y=y+dcos(direction)*mspd;
            }
            if (mouse_check_button(mb_middle)){
                direction=movement_get_direction(direction);
                centerCursor();
            }
            if (Controller.l3){
                z-=mspd;
            }
            if (Controller.r3){
                z+=mspd;
            }
            break;
        case CameraPOV.cam_2d:
            if (hook_to!=noone){
                xto=lerp(xto, hook_to.x, 0.05);
                yto=lerp(yto, hook_to.y, 0.05);
                zto=lerp(zto, hook_to.z+EYE_LEVEL, 0.05);
            } else {
                xto=hook.x;
                yto=hook.y;
                zto=hook.z+EYE_LEVEL;
                switch (plane_2d){
                    case CameraPlanes.xaxis:
                        x=hook.x;
                        y=hook.y+distance;
                        z=hook.z+EYE_LEVEL;
                        break;
                    case CameraPlanes.yaxis:
                        x=hook.x+distance;
                        y=hook.y;
                        z=hook.z+EYE_LEVEL;
                        break;
                }
            }
            xup=0;
            yup=0;
            zup=1;
            break;
    }
    
    UpdateMouseVector(x, y, z, xto, yto, zto, xup, yup, zup);
    
    if (movement_free()&amp;&amp;World.debug&amp;&amp;Controller.release_b){
        with (Baseball){
            instance_destroy();
        }
/*        var b=instance_create(x, y, Baseball);
        var m=1+log2(Controller.dur_b+1)*8;
        b.z=z;
        b.zstart=z;
        b.xspeed=m*(xto-x);
        b.yspeed=m*(yto-y);
        b.zspeed=m*(zto-z);*/
    }
}

direction=point_direction(x, y, xto, yto);

audio_listener_position(x, y, z);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (World.status_id==READY){
    switch (pov){
        case CameraPOV.cam_edit_top:
            d3d_set_projection_ext(x, y, z, x, y, z-1, dcos(direction), -dsin(direction), 0, 0, view_wview/view_hview, 1, 65536);
            break;
        default:
            if (instance_exists(Player)&amp;&amp;Player.free){
                var target_fova=5*Controller.jump+10*(Controller.run||auto_run)+ternary(Player.anim_attack_preparing, -10, 0);
            } else {
                var target_fova=0;
            }
            target_fova=target_fova-archery_fova;
            active_fova=lerp(active_fova, target_fova, 0.5);
            d3d_set_projection_ext(x, y, z, xto, yto, zto, xup, yup, zup, fov+active_fova, W/H, 2, 128000);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
