<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

xspeed=0;
yspeed=0;
zspeed=0;

back=b_cp_ball;
render_script=null;

zstart=0;
// xstart and ystart are automatically handled by Game Maker

air_distance=0;
air_speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zspeed=zspeed-0.16;

//check if the bullet will hit anything
if(c_raycast_world(x, y, z, x+xspeed*World.delta_time_seconds, y+yspeed*World.delta_time_seconds, z+zspeed*World.delta_time_seconds, COLLISION_EVERYTHING)){
    //move the bullet to the hit location, and add a small offset to prevent it from jumping through geometry
    x = c_hit_x()+c_hit_nx()*0.25;
    y = c_hit_y()+c_hit_ny()*0.25;
    z = c_hit_z()+c_hit_nz()*0.25;       
        
    //make it bounce
    var nx = c_hit_nx(), ny = c_hit_ny(), nz = c_hit_nz();
    var dot = dot_product_3d(xspeed, yspeed, zspeed, nx, ny, nz);
    xspeed = (-2*dot*nx + xspeed)*0.4;
    yspeed = (-2*dot*ny + yspeed)*0.4;
    zspeed = (-2*dot*nz + zspeed)*0.4;
    
    air_distance=point_distance_3d(xstart, ystart, zstart, x, y, z);
    air_speed=point_distance_3d(0, 0, 0, xspeed, yspeed, zspeed)*World.delta_time_seconds;
    
    var ad_result=air_distance/32*3;
    var at_result=speed_to_mph(air_speed);
    
    xstart=x;
    ystart=y;
    zstart=z;
} else {
    x += xspeed*World.delta_time_seconds;
    y += yspeed*World.delta_time_seconds;
    z += zspeed*World.delta_time_seconds;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
d3d_draw_ellipsoid(x-1.5, y-1.5, z-1.5, x+1.5, y+1.5, z+1.5, -1, 1, 1, 12);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
