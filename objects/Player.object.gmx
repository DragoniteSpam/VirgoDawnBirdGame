<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

methods_player(methods);

deleteable=false;
render_script=draw_player;
inventory=ds_list_create();
cutscene_lock=true;

name='Player';
nick='Player';
time_start=CURRENT_UNIX_TIME;
time_play=0;    // seconds
walking_animation=true;

personal_friction=0.9;

starting_flight_flaps=8;
flight_flaps=starting_flight_flaps;

below=noone;
below_location_flag=LocationFlags.no;
location=noone;
horizontal_collision_script=hcs_mob;
collision_adder=CollisionMobAdd;
collision_remover=CollisionMobRemove;
collision_r=6;
collision_h=12;

quote='';
do {
    quote=World.quotes[irandom(array_length_1d(World.quotes)-1)];
} until(string_length(quote)&lt;150);

//custscene_index=Cutscenes.no;
npc_index=NPCs.ActivePlayer;
height=28;
register(id, BASE_ASSET, NPCs.ActivePlayer);
class=Classes.BirdCasting;

pid=R2_32;
iv=R2_32;

movement_permissable=true;

set_last_land();

follower=noone;

// Customization

gender=choose(Genders.male, Genders.female, Genders.owl);
cc_frame=0;
cc_direction=0;

// Questing

active_quests=ds_list_create();
completed_quests=ds_list_create();

// Animations

anim_cast_t=0;
anim_cast_rate=0;
anim_cast_scale=10;
anim_strike_scale=50;
anim_swipe_distance=0;
anim_attack_preparing=false;
has_viingge=true;

anim_exp_bar=0; // 'experience to next'

// Combat

aggro_level=Aggro.friendly;
can_die=true;

// Stats

stat_death_locations=ds_list_create();
stat_death_methods=array_add(DeathTypes.death_other, 0);

stat_distance_walked=0;
stat_jumps=0;
stat_arrows=0;
stat_foe_defeats=0;
stat_menu_open=0;
stat_potions_consumed=0;

stat_spells=0;
stat_spell_types=array_add(MagicTypes.legilimens, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (movement_permissable){
    event_inherited();
}

var number_event_overlap=c_overlap_world_position(c_collision_event, x, y, z);

if (number_event_overlap&gt;0){
    script_execute(get_class(id).on_event_trigger, number_event_overlap);
}

soaring=false;

if (instance_exists(World)&amp;&amp;World.cutscene==noone){
    with (EntityFireHarmful){
        if (point_distance_3d(x, y, z, Player.x, Player.y, Player.z)&lt;range_default){
            Player.hp_current=max(0, Player.hp_current-5*World.delta_time_seconds);
            if (Player.hp_current==0){
                with (Player){
                    DIE(noone, DeathTypes.death_other);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zprevious=z;
var zspeedprevious=zspeed;
movement_permissable=true;
var XPV=xprevious;
var YPV=yprevious;
var ZPV=z;

event_inherited();

if (z&lt;(zprevious+c_gravity)&amp;&amp;zspeed==c_gravity){
    // one half * speed, squared / gravity
    air_distance=-power(zspeedprevious, 2)*0.5/c_gravity;
    air_speed=zspeedprevious;
    
    var ad_result=air_distance/32*3;
    var at_result=speed_to_mph(air_speed);
}

///////////////////////////////////
//////// CHANGING LOCATION ////////
///////////////////////////////////

set_weather_and_sign();

///////////////////////////////////
///////// LOCATION STATUS /////////
///////////////////////////////////

if (lm.draw_water&amp;&amp;below_location_flag==LocationFlags.water){
    if (get_class(id).waterwalking){
        var old_movement_state=persistant_movement_state;
        persistant_movement_state=MovementStates.surfing;
        if (World.frames%20==0&amp;&amp;abs(xspeed)&gt;0&amp;&amp;abs(yspeed)&gt;0){
            create_water_ring(x, y, z, 0.1);
            audio_play_sound(se_water_move, 1, false);
            repeat(2){
                create_particle(RANDOM_PARTICLE_WATER, x-8*dcos(Camera.direction), y+8*dsin(Camera.direction),
                    z+16, -30, -30, 0, 30, 30, 60, 1, 300, 0, 0, c_gravity/2);
            }
        }
        if (old_movement_state!=MovementStates.surfing){
            audio_play_sound(se_water_splash_big, 1, false);
            repeat((global_particle_density div 16)+6){
                create_particle(RANDOM_PARTICLE_WATER, x+8*dcos(Camera.direction), y-8*dsin(Camera.direction),
                    z+16, -120, -120, 0, 120, 120, 240, 1, 300, 0, 0, c_gravity/2);
            }
            create_water_ring(x, y, z, 0.1);
        }
    } else {

    }
} else {
    switch (persistant_movement_state){
        case MovementStates.surfing:
            persistant_movement_state=MovementStates.walking;
            break;
        case MovementStates.walking:
        case MovementStates.running:
            // footprints
            if (xspeed!=0||yspeed!=0){
                if (World.frames%15==0&amp;&amp;(below_location_flag==LocationFlags.terrain||below_location_flag==LocationFlags.object)){
                    // @todo Bird footprints?
                    if (World.frames%30==0){
                        create_footprint(x, y, z, direction, Sides.left);
                    } else {
                        create_footprint(x, y, z, direction, Sides.right);
                    }
                }
            }
            break;
    }
}

//////////////////////////////////
/////////// ANIMATIONS ///////////
//////////////////////////////////

anim_cast_t+=anim_cast_rate;
if (anim_cast_t&gt;=ds_map_find_value(all_mod_packages, equip_weapon_package).my_items[equip_weapon].weapon_anim_steps){
    anim_cast_t=0;
    anim_cast_rate=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
